import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { items, userEmail, userId } = await request.json()

    if (!items || items.length === 0) {
      return NextResponse.json(
        { error: 'No items in cart' },
        { status: 400 }
      )
    }

    // Calculate total in INR (assuming 1 USD = 83 INR for demo)
    const usdToInr = 83
    const totalInINR = Math.round(items.reduce((sum: number, item: any) => sum + item.price, 0) * usdToInr)

    // For demo purposes, we'll create a simple UPI payment intent
    // In production, you would integrate with Razorpay, PayU, or similar Indian payment gateway
    
    // Create UPI payment data
    const upiPaymentData = {
      paymentId: `upi_${Date.now()}_${Math.random().toString(36).substring(7)}`,
      amount: totalInINR,
      currency: 'INR',
      items: items.map((item: any) => ({
        id: item.id,
        title: item.title,
        price: Math.round(item.price * usdToInr),
        instructor: item.instructor
      })),
      userEmail,
      userId,
      paymentMethod: 'UPI',
      status: 'pending',
      createdAt: new Date().toISOString(),
      // UPI specific fields
      upiId: null, // To be filled by user
      transactionId: null, // Generated after payment
      paymentGateway: 'demo', // In production: 'razorpay', 'payu', etc.
    }

    // Generate UPI payment URL for demo
    // In production, this would be generated by your payment gateway
    const upiUrl = `upi://pay?pa=merchant@paytm&pn=CourseCompass&am=${totalInINR}&cu=INR&tn=Course Purchase - ${items.length} courses`

    return NextResponse.json({
      paymentData: upiPaymentData,
      upiUrl,
      qrCodeUrl: `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(upiUrl)}`,
      message: 'UPI payment initiated. Complete payment using any UPI app.'
    })

  } catch (error) {
    console.error('Error creating UPI payment:', error)
    
    return NextResponse.json(
      { error: 'Failed to create UPI payment' },
      { status: 500 }
    )
  }
}

// Verify UPI payment status (demo endpoint)
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const paymentId = searchParams.get('paymentId')

    if (!paymentId) {
      return NextResponse.json(
        { error: 'Payment ID required' },
        { status: 400 }
      )
    }

    // In production, you would verify the payment status with your payment gateway
    // For demo, we'll simulate different payment statuses
    const demoStatuses = ['pending', 'success', 'failed']
    const randomStatus = demoStatuses[Math.floor(Math.random() * demoStatuses.length)]

    return NextResponse.json({
      paymentId,
      status: randomStatus,
      verifiedAt: new Date().toISOString(),
      ...(randomStatus === 'success' && {
        transactionId: `txn_${Date.now()}`,
        message: 'Payment verified successfully'
      }),
      ...(randomStatus === 'failed' && {
        message: 'Payment verification failed. Please try again.'
      }),
      ...(randomStatus === 'pending' && {
        message: 'Payment is still being processed. Please wait.'
      })
    })

  } catch (error) {
    console.error('Error verifying UPI payment:', error)
    
    return NextResponse.json(
      { error: 'Failed to verify payment' },
      { status: 500 }
    )
  }
}