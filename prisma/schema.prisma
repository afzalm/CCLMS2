// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  password    String?
  role        Role     @default(STUDENT)
  avatar      String?
  avatarFileId String? // Reference to UploadedFile
  bio         String?
  phone       String?
  location    String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courses     Course[] @relation("TrainerCourses")
  enrollments Enrollment[]
  progress    Progress[]
  reviews     Review[]
  payments    Payment[]
  quizAttempts QuizAttempt[]
  activityLogs ActivityLog[]
  reportsMade ContentReport[] @relation("ReportsMade")
  reportsReviewed ContentReport[] @relation("ReportsReviewed")
  moderationActions ModerationAction[] @relation("ModerationActionsPerformed")
  supportTickets SupportTicket[] @relation("TicketsCreated")
  assignedTickets SupportTicket[] @relation("TicketsAssigned")
  ticketMessages TicketMessage[] @relation("TicketMessagesSent")
  avatarFile  UploadedFile? @relation("UserAvatarFile", fields: [avatarFileId], references: [id])
  uploadedFiles UploadedFile[] @relation("FileUploader")

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  description String?
  price       Float    @default(0)
  thumbnail   String?
  thumbnailFileId String? // Reference to UploadedFile
  status      CourseStatus @default(DRAFT)
  level       DifficultyLevel @default(BEGINNER)
  language    String   @default("en")
  categoryId  String?
  trainerId   String
  publishedAt DateTime?
  learningObjectives Json? // JSON array
  requirements Json? // JSON array
  targetAudience String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  trainer     User     @relation("TrainerCourses", fields: [trainerId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  lessons     Lesson[]
  enrollments Enrollment[]
  reviews     Review[]
  chapters    Chapter[]
  payments    Payment[]
  thumbnailFile UploadedFile? @relation("CourseThumbnailFile", fields: [thumbnailFileId], references: [id])

  @@map("courses")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  courses     Course[]

  @@map("categories")
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@map("chapters")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  videoFileId String? // Reference to UploadedFile
  duration    Int?     // in minutes
  content     String?  // text content
  order       Int
  chapterId   String
  courseId    String
  isPreview   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    Progress[]
  quiz        Quiz?
  videoFile   UploadedFile? @relation("LessonVideoFile", fields: [videoFileId], references: [id])

  @@map("lessons")
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  passingScore Int     @default(70) // percentage
  lessonId    String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]

  @@map("quizzes")
}

model Question {
  id          String   @id @default(cuid())
  question    String
  type        QuestionType @default(MULTIPLE_CHOICE)
  options     String? // JSON array of options
  correctAnswer String // JSON string with correct answer(s)
  points      Int      @default(1)
  quizId      String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     QuizAnswer[]

  @@map("questions")
}

model QuizAttempt {
  id        String   @id @default(cuid())
  score     Float
  maxScore  Float
  passed    Boolean
  studentId String
  quizId    String
  startedAt DateTime @default(now())
  completedAt DateTime?

  // Relations
  student   User     @relation(fields: [studentId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  answers   QuizAnswer[]

  @@map("quiz_attempts")
}

model QuizAnswer {
  id         String   @id @default(cuid())
  answer     String   // JSON string with student's answer
  isCorrect  Boolean
  points     Int
  attemptId  String
  questionId String
  createdAt  DateTime @default(now())

  // Relations
  attempt    QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("quiz_answers")
}

model Enrollment {
  id          String   @id @default(cuid())
  studentId   String
  courseId    String
  status      EnrollmentStatus @default(ACTIVE)
  progress    Float    @default(0) // percentage
  enrolledAt  DateTime @default(now())
  completedAt DateTime?

  // Relations
  student     User     @relation(fields: [studentId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])
  lessonProgress Progress[]
  payments    Payment[]

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Progress {
  id               String   @id @default(cuid())
  studentId        String
  lessonId         String
  enrollmentId     String?
  progressPercentage Float  @default(0) // 0-100
  watchTime        Int      @default(0) // in seconds
  completed        Boolean  @default(false)
  lastPosition     Int?     // video position in seconds
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  student    User     @relation(fields: [studentId], references: [id])
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id])

  @@unique([studentId, lessonId])
  @@map("progress")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  studentId String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student   User     @relation(fields: [studentId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
  @@map("reviews")
}

model Payment {
  id            String   @id @default(cuid())
  amount        Float
  currency      String   @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  studentId     String
  courseId      String?
  enrollmentId  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  student       User       @relation(fields: [studentId], references: [id])
  course        Course?    @relation(fields: [courseId], references: [id])
  enrollment    Enrollment? @relation(fields: [enrollmentId], references: [id])

  @@map("payments")
}

model ActivityLog {
  id           String   @id @default(cuid())
  userId       String
  action       String   // "COURSE_PUBLISHED", "AVATAR_UPDATED", "LESSON_VIDEO_UPLOADED", etc.
  details      String
  metadata     Json?    // Additional data related to the activity
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model UploadedFile {
  id               String   @id @default(cuid())
  originalName     String   // Original filename as uploaded
  fileName         String   // Secure filename on disk
  filePath         String   // Full path relative to public directory
  mimeType         String   // File MIME type
  fileSize         Int      // File size in bytes
  category         FileCategory // AVATAR, THUMBNAIL, VIDEO, DOCUMENT
  uploadedBy       String   // User who uploaded the file
  entityType       String?  // COURSE, LESSON, USER (what this file belongs to)
  entityId         String?  // ID of the entity this file belongs to
  isActive         Boolean  @default(true) // For soft deletion
  metadata         Json?    // Additional file metadata (dimensions, duration, etc.)
  virusScanStatus  VirusScanStatus @default(PENDING)
  virusScanResult  String?  // Scan result details
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  deletedAt        DateTime? // For soft deletion tracking

  // Relations
  uploader         User     @relation("FileUploader", fields: [uploadedBy], references: [id])
  userAvatars      User[]   @relation("UserAvatarFile")
  courseThumbnails Course[] @relation("CourseThumbnailFile")
  lessonVideos     Lesson[] @relation("LessonVideoFile")

  @@index([category])
  @@index([uploadedBy])
  @@index([entityType, entityId])
  @@index([isActive])
  @@index([createdAt])
  @@map("uploaded_files")
}

model SSOProvider {
  id          String   @id @default(cuid())
  name        String   @unique // "google", "facebook", "linkedin"
  displayName String   // "Google", "Facebook", "LinkedIn"
  clientId    String
  clientSecret String
  enabled     Boolean  @default(true)
  scopes      String?  // JSON array of scopes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sso_providers")
}

model ContentReport {
  id          String   @id @default(cuid())
  contentType ReportContentType // COURSE, REVIEW, USER
  contentId   String   // ID of the reported content
  reporterId  String   // User who made the report
  reason      String   // Reason for the report
  description String?  // Additional details
  severity    ReportSeverity @default(MEDIUM)
  status      ReportStatus @default(PENDING)
  reviewedBy  String?  // Admin who reviewed the report
  reviewedAt  DateTime?
  resolution  String?  // Resolution notes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reporter    User     @relation("ReportsMade", fields: [reporterId], references: [id])
  reviewer    User?    @relation("ReportsReviewed", fields: [reviewedBy], references: [id])
  actions     ModerationAction[]

  @@map("content_reports")
}

model ModerationAction {
  id          String   @id @default(cuid())
  reportId    String?
  contentType ActionContentType
  contentId   String   // ID of the content being moderated
  actionType  ActionType
  performedBy String   // Admin who performed the action
  reason      String?
  notes       String?
  createdAt   DateTime @default(now())

  // Relations
  report      ContentReport? @relation(fields: [reportId], references: [id])
  moderator   User     @relation("ModerationActionsPerformed", fields: [performedBy], references: [id])

  @@map("moderation_actions")
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  description String
  category    TicketCategory @default(GENERAL)
  priority    TicketPriority @default(MEDIUM)
  status      TicketStatus @default(OPEN)
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?

  // Relations
  user        User     @relation("TicketsCreated", fields: [userId], references: [id])
  assignee    User?    @relation("TicketsAssigned", fields: [assignedTo], references: [id])
  messages    TicketMessage[]

  @@map("support_tickets")
}

model TicketMessage {
  id        String   @id @default(cuid())
  ticketId  String
  senderId  String
  message   String
  isInternal Boolean @default(false) // Internal admin notes
  createdAt DateTime @default(now())

  // Relations
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender    User     @relation("TicketMessagesSent", fields: [senderId], references: [id])

  @@map("ticket_messages")
}

// Enums
enum Role {
  STUDENT
  TRAINER
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum QuestionType {
  MULTIPLE_CHOICE
  MULTIPLE_ANSWER
  TRUE_FALSE
  TEXT
}

enum ReportContentType {
  COURSE
  REVIEW
  USER
  LESSON
}

enum ReportSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ActionContentType {
  COURSE
  REVIEW
  USER
  LESSON
}

enum ActionType {
  WARNING
  SUSPEND
  BAN
  DELETE
  HIDE
  APPROVE
  REJECT
  FLAG
  UNFLAG
}

enum TicketCategory {
  GENERAL
  TECHNICAL
  BILLING
  CONTENT
  ACCOUNT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_USER
  RESOLVED
  CLOSED
}

enum FileCategory {
  AVATAR
  THUMBNAIL
  VIDEO
  DOCUMENT
  RESOURCE
}

enum VirusScanStatus {
  PENDING
  SCANNING
  CLEAN
  INFECTED
  ERROR
}